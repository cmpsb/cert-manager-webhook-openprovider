// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ZoneRecordWithOriginal RecordWithOriginal
// Example: {"original_record":{"name":"domain.com","prio":1,"ttl":900,"type":"CNAME","value":"abcd.domain.com"},"record":{"name":"domain.com","prio":1,"ttl":900,"type":"CNAME","value":"abcd.domain.com"}}
//
// swagger:model zoneRecordWithOriginal
type ZoneRecordWithOriginal struct {

	// Array of DNS records to update
	OriginalRecord *ZoneRecord `json:"original_record,omitempty"`

	// Array of DNS records to update
	Record *ZoneRecord `json:"record,omitempty"`
}

// Validate validates this zone record with original
func (m *ZoneRecordWithOriginal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOriginalRecord(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecord(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneRecordWithOriginal) validateOriginalRecord(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginalRecord) { // not required
		return nil
	}

	if m.OriginalRecord != nil {
		if err := m.OriginalRecord.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("original_record")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("original_record")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneRecordWithOriginal) validateRecord(formats strfmt.Registry) error {
	if swag.IsZero(m.Record) { // not required
		return nil
	}

	if m.Record != nil {
		if err := m.Record.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("record")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("record")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this zone record with original based on the context it is used
func (m *ZoneRecordWithOriginal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOriginalRecord(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecord(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneRecordWithOriginal) contextValidateOriginalRecord(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginalRecord != nil {
		if err := m.OriginalRecord.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("original_record")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("original_record")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneRecordWithOriginal) contextValidateRecord(ctx context.Context, formats strfmt.Registry) error {

	if m.Record != nil {
		if err := m.Record.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("record")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("record")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZoneRecordWithOriginal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZoneRecordWithOriginal) UnmarshalBinary(b []byte) error {
	var res ZoneRecordWithOriginal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
