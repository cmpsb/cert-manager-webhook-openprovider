// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ZonePremiumDNSData PremiumDnsData
// Example: {"sectigo":{"autorenew":false,"order_date":"2021-08-05 7:37:28","renewal_date":"2022-11-28 6:57:05","secured":false,"website_id":123456}}
//
// swagger:model zonePremiumDnsData
type ZonePremiumDNSData struct {

	// Additional data related to premium DNS zone managed by Sectigo
	Sectigo *ZoneSectigoData `json:"sectigo,omitempty"`
}

// Validate validates this zone premium Dns data
func (m *ZonePremiumDNSData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSectigo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZonePremiumDNSData) validateSectigo(formats strfmt.Registry) error {
	if swag.IsZero(m.Sectigo) { // not required
		return nil
	}

	if m.Sectigo != nil {
		if err := m.Sectigo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sectigo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sectigo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this zone premium Dns data based on the context it is used
func (m *ZonePremiumDNSData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSectigo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZonePremiumDNSData) contextValidateSectigo(ctx context.Context, formats strfmt.Registry) error {

	if m.Sectigo != nil {
		if err := m.Sectigo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sectigo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sectigo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZonePremiumDNSData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZonePremiumDNSData) UnmarshalBinary(b []byte) error {
	var res ZonePremiumDNSData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
