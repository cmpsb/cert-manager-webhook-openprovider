// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ZoneZone Zone
// Example: {"active":true,"creation_date":"2012-02-05 7:37:28","dnskey":"","history":[{"date":"2019-06-19 17:40:09","is":true,"source":"","was":""}],"id":12345,"ip":"127.0.0.1","is_deleted":false,"is_shadow":false,"is_spamexperts_enabled":false,"modification_date":"2018-11-28 6:57:05","name":"domain.com","premium_dns":{"sectigo":{"autorenew":false,"order_date":"2021-08-05 7:37:28","renewal_date":"2022-11-28 6:57:05","secured":false,"website_id":123456}},"provider":"sectigo","records":[{"creation_date":"","ip":"127.0.0.1","modification_date":"","name":"domain.com","prio":1,"ttl":900,"type":"CNAME","value":"abcd.domain.com"}],"reseller_id":123456,"type":"master"}
//
// swagger:model zoneZone
type ZoneZone struct {

	// Indicates whether DNS zone is active or inactive (shadow)
	Active bool `json:"active,omitempty"`

	// DNS zone creation date
	CreationDate string `json:"creation_date,omitempty"`

	// DNS zone's DNSSEC signing key
	Dnskey string `json:"dnskey,omitempty"`

	// DNS zone updates history
	History []*HistoryZoneHistory `json:"history"`

	// DNS zone ID
	ID int32 `json:"id,omitempty"`

	// DNS record IP address
	IP string `json:"ip,omitempty"`

	// Indicates whether DNS zone is deleted
	IsDeleted bool `json:"is_deleted,omitempty"`

	// Indicates whether DNS zone is active or inactive (shadow)
	IsShadow bool `json:"is_shadow,omitempty"`

	// Indicates whether spamfiltering is enabled for the DNS zone
	IsSpamexpertsEnabled bool `json:"is_spamexperts_enabled,omitempty"`

	// Date the DNS zone was last modified
	ModificationDate string `json:"modification_date,omitempty"`

	// Name of the domain to which DNS zone corresponds
	Name string `json:"name,omitempty"`

	// Additional data related to premium DNS zone
	PremiumDNS *ZonePremiumDNSData `json:"premium_dns,omitempty"`

	// Name of the DNS provider
	Provider string `json:"provider,omitempty"`

	// Array of DNS records
	Records []*RecordRecordInfo `json:"records"`

	// Your reseller ID
	ResellerID int32 `json:"reseller_id,omitempty"`

	// The type
	Type string `json:"type,omitempty"`
}

// Validate validates this zone zone
func (m *ZoneZone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePremiumDNS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneZone) validateHistory(formats strfmt.Registry) error {
	if swag.IsZero(m.History) { // not required
		return nil
	}

	for i := 0; i < len(m.History); i++ {
		if swag.IsZero(m.History[i]) { // not required
			continue
		}

		if m.History[i] != nil {
			if err := m.History[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("history" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("history" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ZoneZone) validatePremiumDNS(formats strfmt.Registry) error {
	if swag.IsZero(m.PremiumDNS) { // not required
		return nil
	}

	if m.PremiumDNS != nil {
		if err := m.PremiumDNS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("premium_dns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("premium_dns")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneZone) validateRecords(formats strfmt.Registry) error {
	if swag.IsZero(m.Records) { // not required
		return nil
	}

	for i := 0; i < len(m.Records); i++ {
		if swag.IsZero(m.Records[i]) { // not required
			continue
		}

		if m.Records[i] != nil {
			if err := m.Records[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this zone zone based on the context it is used
func (m *ZoneZone) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHistory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePremiumDNS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneZone) contextValidateHistory(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.History); i++ {

		if m.History[i] != nil {
			if err := m.History[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("history" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("history" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ZoneZone) contextValidatePremiumDNS(ctx context.Context, formats strfmt.Registry) error {

	if m.PremiumDNS != nil {
		if err := m.PremiumDNS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("premium_dns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("premium_dns")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneZone) contextValidateRecords(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Records); i++ {

		if m.Records[i] != nil {
			if err := m.Records[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZoneZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZoneZone) UnmarshalBinary(b []byte) error {
	var res ZoneZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
