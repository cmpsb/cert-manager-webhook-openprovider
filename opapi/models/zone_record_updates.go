// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ZoneRecordUpdates RecordUpdates
// Example: {"add":[{"name":"domain.com","prio":1,"ttl":900,"type":"CNAME","value":"abcd.domain.com"}],"remove":[{"name":"domain.com","prio":1,"ttl":900,"type":"CNAME","value":"abcd.domain.com"}],"replace":[{"name":"domain.com","prio":1,"ttl":900,"type":"CNAME","value":"abcd.domain.com"}],"update":[{"original_record":{"name":"domain.com","prio":1,"ttl":900,"type":"CNAME","value":"abcd.domain.com"},"record":{"name":"domain.com","prio":1,"ttl":900,"type":"CNAME","value":"abcd.domain.com"}}]}
//
// swagger:model zoneRecordUpdates
type ZoneRecordUpdates struct {

	// Array of DNS records to add
	Add []*ZoneRecord `json:"add"`

	// Array of DNS records to remove
	Remove []*ZoneRecord `json:"remove"`

	// Array of DNS records to replace
	Replace []*ZoneRecord `json:"replace"`

	// Array of DNS records to update
	Update []*ZoneRecordWithOriginal `json:"update"`
}

// Validate validates this zone record updates
func (m *ZoneRecordUpdates) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemove(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneRecordUpdates) validateAdd(formats strfmt.Registry) error {
	if swag.IsZero(m.Add) { // not required
		return nil
	}

	for i := 0; i < len(m.Add); i++ {
		if swag.IsZero(m.Add[i]) { // not required
			continue
		}

		if m.Add[i] != nil {
			if err := m.Add[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("add" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("add" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ZoneRecordUpdates) validateRemove(formats strfmt.Registry) error {
	if swag.IsZero(m.Remove) { // not required
		return nil
	}

	for i := 0; i < len(m.Remove); i++ {
		if swag.IsZero(m.Remove[i]) { // not required
			continue
		}

		if m.Remove[i] != nil {
			if err := m.Remove[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remove" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remove" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ZoneRecordUpdates) validateReplace(formats strfmt.Registry) error {
	if swag.IsZero(m.Replace) { // not required
		return nil
	}

	for i := 0; i < len(m.Replace); i++ {
		if swag.IsZero(m.Replace[i]) { // not required
			continue
		}

		if m.Replace[i] != nil {
			if err := m.Replace[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replace" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replace" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ZoneRecordUpdates) validateUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.Update) { // not required
		return nil
	}

	for i := 0; i < len(m.Update); i++ {
		if swag.IsZero(m.Update[i]) { // not required
			continue
		}

		if m.Update[i] != nil {
			if err := m.Update[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("update" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("update" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this zone record updates based on the context it is used
func (m *ZoneRecordUpdates) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemove(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneRecordUpdates) contextValidateAdd(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Add); i++ {

		if m.Add[i] != nil {
			if err := m.Add[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("add" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("add" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ZoneRecordUpdates) contextValidateRemove(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Remove); i++ {

		if m.Remove[i] != nil {
			if err := m.Remove[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remove" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remove" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ZoneRecordUpdates) contextValidateReplace(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Replace); i++ {

		if m.Replace[i] != nil {
			if err := m.Replace[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replace" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replace" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ZoneRecordUpdates) contextValidateUpdate(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Update); i++ {

		if m.Update[i] != nil {
			if err := m.Update[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("update" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("update" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZoneRecordUpdates) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZoneRecordUpdates) UnmarshalBinary(b []byte) error {
	var res ZoneRecordUpdates
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
