// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ZoneCreateZoneRequest CreateZoneRequest
// Example: {"domain":{"extension":"com","name":"domain"},"is_spamexperts_enabled":"on","master_ip":"127.0.0.1","provider":"sectigo","records":[{"name":"domain.com","prio":1,"ttl":900,"type":"CNAME","value":"abcd.domain.com"}],"secured":false,"template_name":"default","type":"master"}
//
// swagger:model zoneCreateZoneRequest
type ZoneCreateZoneRequest struct {

	// Name of the domain to which DNS zone corresponds. Represented by array of domain name and extension
	Domain *ZoneDomain `json:"domain,omitempty"`

	// Used to enable spam filtering for this DNS zone
	IsSpamexpertsEnabled string `json:"is_spamexperts_enabled,omitempty"`

	// IP of the master nameserver for this DNS zone. Required if DNS zone type = slave
	MasterIP string `json:"master_ip,omitempty"`

	// Name of the DNS provider. Set provider=sectigo in case of sectigo premium DNS zone should be created
	Provider string `json:"provider,omitempty"`

	// Array of DNS records
	Records []*ZoneRecord `json:"records"`

	// Used to enable or disable DNSSEC for this DNS zone
	Secured bool `json:"secured,omitempty"`

	// Name of the DNS template to use with this DNS zone
	TemplateName string `json:"template_name,omitempty"`

	// DNS zone type (master or slave)
	Type string `json:"type,omitempty"`
}

// Validate validates this zone create zone request
func (m *ZoneCreateZoneRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneCreateZoneRequest) validateDomain(formats strfmt.Registry) error {
	if swag.IsZero(m.Domain) { // not required
		return nil
	}

	if m.Domain != nil {
		if err := m.Domain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneCreateZoneRequest) validateRecords(formats strfmt.Registry) error {
	if swag.IsZero(m.Records) { // not required
		return nil
	}

	for i := 0; i < len(m.Records); i++ {
		if swag.IsZero(m.Records[i]) { // not required
			continue
		}

		if m.Records[i] != nil {
			if err := m.Records[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this zone create zone request based on the context it is used
func (m *ZoneCreateZoneRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneCreateZoneRequest) contextValidateDomain(ctx context.Context, formats strfmt.Registry) error {

	if m.Domain != nil {
		if err := m.Domain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneCreateZoneRequest) contextValidateRecords(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Records); i++ {

		if m.Records[i] != nil {
			if err := m.Records[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZoneCreateZoneRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZoneCreateZoneRequest) UnmarshalBinary(b []byte) error {
	var res ZoneCreateZoneRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
