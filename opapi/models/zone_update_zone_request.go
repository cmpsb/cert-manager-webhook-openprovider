// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ZoneUpdateZoneRequest UpdateZoneRequest
// Example: {"domain":{"extension":"com","name":"domain"},"id":1234567,"is_spamexperts_enabled":true,"master_ip":"127.0.0.1","name":"domain.com","premium_dns":{"sectigo":{"autorenew":false,"order_date":"2021-08-05 7:37:28","renewal_date":"2022-11-28 6:57:05","secured":false,"website_id":123456}},"provider":"sectigo","records":{"add":[{"name":"domain.com","prio":1,"ttl":900,"type":"CNAME","value":"abcd.domain.com"}],"remove":[{"name":"domain.com","prio":1,"ttl":900,"type":"CNAME","value":"abcd.domain.com"}],"replace":[{"name":"domain.com","prio":1,"ttl":900,"type":"CNAME","value":"abcd.domain.com"}],"update":[{"original_record":{"name":"domain.com","prio":1,"ttl":900,"type":"CNAME","value":"abcd.domain.com"},"record":{"name":"domain.com","prio":1,"ttl":900,"type":"CNAME","value":"abcd.domain.com"}}]},"type":"slave"}
//
// swagger:model zoneUpdateZoneRequest
type ZoneUpdateZoneRequest struct {

	// Name of the domain to which DNS zone corresponds. Represented by array of domain name and extension
	Domain *ZoneDomain `json:"domain,omitempty"`

	// DNS zone ID
	ID int32 `json:"id,omitempty"`

	// Used to enable spam filtering for this DNS zone
	IsSpamexpertsEnabled bool `json:"is_spamexperts_enabled,omitempty"`

	// IP of the master nameserver for this DNS zone. Required if DNS zone type = slave
	MasterIP string `json:"master_ip,omitempty"`

	// Name of the domain to which DNS zone corresponds
	Name string `json:"name,omitempty"`

	// Additional data related to premium DNS zone
	PremiumDNS *ZonePremiumDNSData `json:"premium_dns,omitempty"`

	// Name of the DNS provider. Set provider=sectigo in case of sectigo premium DNS zone should be updated
	Provider string `json:"provider,omitempty"`

	// DNS zone records grouped by action
	Records *ZoneRecordUpdates `json:"records,omitempty"`

	// Type of DNS zone (master or slave)
	Type string `json:"type,omitempty"`
}

// Validate validates this zone update zone request
func (m *ZoneUpdateZoneRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePremiumDNS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneUpdateZoneRequest) validateDomain(formats strfmt.Registry) error {
	if swag.IsZero(m.Domain) { // not required
		return nil
	}

	if m.Domain != nil {
		if err := m.Domain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneUpdateZoneRequest) validatePremiumDNS(formats strfmt.Registry) error {
	if swag.IsZero(m.PremiumDNS) { // not required
		return nil
	}

	if m.PremiumDNS != nil {
		if err := m.PremiumDNS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("premium_dns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("premium_dns")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneUpdateZoneRequest) validateRecords(formats strfmt.Registry) error {
	if swag.IsZero(m.Records) { // not required
		return nil
	}

	if m.Records != nil {
		if err := m.Records.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("records")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("records")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this zone update zone request based on the context it is used
func (m *ZoneUpdateZoneRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePremiumDNS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneUpdateZoneRequest) contextValidateDomain(ctx context.Context, formats strfmt.Registry) error {

	if m.Domain != nil {
		if err := m.Domain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneUpdateZoneRequest) contextValidatePremiumDNS(ctx context.Context, formats strfmt.Registry) error {

	if m.PremiumDNS != nil {
		if err := m.PremiumDNS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("premium_dns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("premium_dns")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneUpdateZoneRequest) contextValidateRecords(ctx context.Context, formats strfmt.Registry) error {

	if m.Records != nil {
		if err := m.Records.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("records")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("records")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZoneUpdateZoneRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZoneUpdateZoneRequest) UnmarshalBinary(b []byte) error {
	var res ZoneUpdateZoneRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
