// Code generated by go-swagger; DO NOT EDIT.

package zone_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new zone service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for zone service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateZone(params *CreateZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateZoneOK, error)

	DeleteZone(params *DeleteZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteZoneOK, error)

	GetZone(params *GetZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetZoneOK, error)

	ListZones(params *ListZonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListZonesOK, error)

	UpdateZone(params *UpdateZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateZoneOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateZone creates zone
*/
func (a *Client) CreateZone(params *CreateZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateZoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateZone",
		Method:             "POST",
		PathPattern:        "/v1beta/dns/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateZoneDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteZone deletes zone
*/
func (a *Client) DeleteZone(params *DeleteZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteZoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteZone",
		Method:             "DELETE",
		PathPattern:        "/v1beta/dns/zones/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteZoneDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetZone gets zone
*/
func (a *Client) GetZone(params *GetZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetZoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetZone",
		Method:             "GET",
		PathPattern:        "/v1beta/dns/zones/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetZoneDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListZones lists zones
*/
func (a *Client) ListZones(params *ListZonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListZonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListZones",
		Method:             "GET",
		PathPattern:        "/v1beta/dns/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListZonesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateZone updates zone
*/
func (a *Client) UpdateZone(params *UpdateZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateZoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateZone",
		Method:             "PUT",
		PathPattern:        "/v1beta/dns/zones/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateZoneDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
