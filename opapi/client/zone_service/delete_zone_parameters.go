// Code generated by go-swagger; DO NOT EDIT.

package zone_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteZoneParams creates a new DeleteZoneParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteZoneParams() *DeleteZoneParams {
	return &DeleteZoneParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteZoneParamsWithTimeout creates a new DeleteZoneParams object
// with the ability to set a timeout on a request.
func NewDeleteZoneParamsWithTimeout(timeout time.Duration) *DeleteZoneParams {
	return &DeleteZoneParams{
		timeout: timeout,
	}
}

// NewDeleteZoneParamsWithContext creates a new DeleteZoneParams object
// with the ability to set a context for a request.
func NewDeleteZoneParamsWithContext(ctx context.Context) *DeleteZoneParams {
	return &DeleteZoneParams{
		Context: ctx,
	}
}

// NewDeleteZoneParamsWithHTTPClient creates a new DeleteZoneParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteZoneParamsWithHTTPClient(client *http.Client) *DeleteZoneParams {
	return &DeleteZoneParams{
		HTTPClient: client,
	}
}

/*
DeleteZoneParams contains all the parameters to send to the API endpoint

	for the delete zone operation.

	Typically these are written to a http.Request.
*/
type DeleteZoneParams struct {

	/* DomainExtension.

	   Domain extension.
	*/
	DomainExtension *string

	/* DomainName.

	   Domain name without extension.
	*/
	DomainName *string

	/* ID.

	   DNS zone ID.

	   Format: int32
	*/
	ID *int32

	/* Name.

	   Name of the domain to which DNS zone corresponds
	*/
	Name string

	/* Provider.

	   Name of the DNS provider. Set provider=sectigo in case of sectigo premium DNS zone should be deleted.
	*/
	Provider *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete zone params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteZoneParams) WithDefaults() *DeleteZoneParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete zone params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteZoneParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete zone params
func (o *DeleteZoneParams) WithTimeout(timeout time.Duration) *DeleteZoneParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete zone params
func (o *DeleteZoneParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete zone params
func (o *DeleteZoneParams) WithContext(ctx context.Context) *DeleteZoneParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete zone params
func (o *DeleteZoneParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete zone params
func (o *DeleteZoneParams) WithHTTPClient(client *http.Client) *DeleteZoneParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete zone params
func (o *DeleteZoneParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomainExtension adds the domainExtension to the delete zone params
func (o *DeleteZoneParams) WithDomainExtension(domainExtension *string) *DeleteZoneParams {
	o.SetDomainExtension(domainExtension)
	return o
}

// SetDomainExtension adds the domainExtension to the delete zone params
func (o *DeleteZoneParams) SetDomainExtension(domainExtension *string) {
	o.DomainExtension = domainExtension
}

// WithDomainName adds the domainName to the delete zone params
func (o *DeleteZoneParams) WithDomainName(domainName *string) *DeleteZoneParams {
	o.SetDomainName(domainName)
	return o
}

// SetDomainName adds the domainName to the delete zone params
func (o *DeleteZoneParams) SetDomainName(domainName *string) {
	o.DomainName = domainName
}

// WithID adds the id to the delete zone params
func (o *DeleteZoneParams) WithID(id *int32) *DeleteZoneParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the delete zone params
func (o *DeleteZoneParams) SetID(id *int32) {
	o.ID = id
}

// WithName adds the name to the delete zone params
func (o *DeleteZoneParams) WithName(name string) *DeleteZoneParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the delete zone params
func (o *DeleteZoneParams) SetName(name string) {
	o.Name = name
}

// WithProvider adds the provider to the delete zone params
func (o *DeleteZoneParams) WithProvider(provider *string) *DeleteZoneParams {
	o.SetProvider(provider)
	return o
}

// SetProvider adds the provider to the delete zone params
func (o *DeleteZoneParams) SetProvider(provider *string) {
	o.Provider = provider
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteZoneParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DomainExtension != nil {

		// query param domain.extension
		var qrDomainExtension string

		if o.DomainExtension != nil {
			qrDomainExtension = *o.DomainExtension
		}
		qDomainExtension := qrDomainExtension
		if qDomainExtension != "" {

			if err := r.SetQueryParam("domain.extension", qDomainExtension); err != nil {
				return err
			}
		}
	}

	if o.DomainName != nil {

		// query param domain.name
		var qrDomainName string

		if o.DomainName != nil {
			qrDomainName = *o.DomainName
		}
		qDomainName := qrDomainName
		if qDomainName != "" {

			if err := r.SetQueryParam("domain.name", qDomainName); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int32

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt32(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.Provider != nil {

		// query param provider
		var qrProvider string

		if o.Provider != nil {
			qrProvider = *o.Provider
		}
		qProvider := qrProvider
		if qProvider != "" {

			if err := r.SetQueryParam("provider", qProvider); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
